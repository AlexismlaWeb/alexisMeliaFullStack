{"ast":null,"code":"var _jsxFileName = \"/Users/alexis_mla/Documents/GitHub/alexisMeliaFullStack/frontend/src/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// AuthContext.js\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    // Récupère l'état de l'authentification depuis localStorage\n    return localStorage.getItem('isAuthenticated') === 'true';\n  });\n  const [isAdmin, setIsAdmin] = useState(() => {\n    // Récupère l'état de l'administrateur depuis localStorage\n    return localStorage.getItem('isAdmin') === 'true';\n  });\n  const [token, setToken] = useState(() => {\n    // Récupère le token depuis localStorage\n    return localStorage.getItem('token');\n  });\n\n  // Fonction pour mettre à jour l'état de l'authentification\n  const updateAuthState = (authenticated, admin, authToken) => {\n    setIsAuthenticated(authenticated);\n    setIsAdmin(admin);\n    if (!authenticated) {\n      localStorage.removeItem('token');\n    } else {\n      localStorage.setItem('token', authToken);\n    }\n    // Stocke l'état de l'authentification dans localStorage\n    localStorage.setItem('isAuthenticated', authenticated);\n    localStorage.setItem('isAdmin', admin);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      isAdmin,\n      updateAuthState,\n      token\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"AXrFEluXXrxTEH7rdARLXQBPplo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","localStorage","getItem","isAdmin","setIsAdmin","token","setToken","updateAuthState","authenticated","admin","authToken","removeItem","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/alexis_mla/Documents/GitHub/alexisMeliaFullStack/frontend/src/AuthContext.js"],"sourcesContent":["// AuthContext.js\nimport React, { createContext, useState, useContext } from 'react';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(() => {\n        // Récupère l'état de l'authentification depuis localStorage\n        return localStorage.getItem('isAuthenticated') === 'true';\n    });\n    const [isAdmin, setIsAdmin] = useState(() => {\n        // Récupère l'état de l'administrateur depuis localStorage\n        return localStorage.getItem('isAdmin') === 'true';\n    });\n\n    const [token, setToken] = useState(() => {\n        // Récupère le token depuis localStorage\n        return localStorage.getItem('token');\n    }\n    );\n\n    // Fonction pour mettre à jour l'état de l'authentification\n    const updateAuthState = (authenticated, admin, authToken) => {\n        setIsAuthenticated(authenticated);\n        setIsAdmin(admin);\n        if (!authenticated) {\n            localStorage.removeItem('token');\n        }else {\n            localStorage.setItem('token', authToken);\n        }\n        // Stocke l'état de l'authentification dans localStorage\n        localStorage.setItem('isAuthenticated', authenticated);\n        localStorage.setItem('isAdmin', admin);\n    };\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, isAdmin, updateAuthState, token }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,MAAM;IACzD;IACA,OAAOU,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,KAAK,MAAM;EAC7D,CAAC,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,MAAM;IACzC;IACA,OAAOU,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,KAAK,MAAM;EACrD,CAAC,CAAC;EAEF,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,MAAM;IACrC;IACA,OAAOU,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC,CACA,CAAC;;EAED;EACA,MAAMK,eAAe,GAAGA,CAACC,aAAa,EAAEC,KAAK,EAAEC,SAAS,KAAK;IACzDV,kBAAkB,CAACQ,aAAa,CAAC;IACjCJ,UAAU,CAACK,KAAK,CAAC;IACjB,IAAI,CAACD,aAAa,EAAE;MAChBP,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IACpC,CAAC,MAAK;MACFV,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEF,SAAS,CAAC;IAC5C;IACA;IACAT,YAAY,CAACW,OAAO,CAAC,iBAAiB,EAAEJ,aAAa,CAAC;IACtDP,YAAY,CAACW,OAAO,CAAC,SAAS,EAAEH,KAAK,CAAC;EAC1C,CAAC;EAED,oBACIf,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEf,eAAe;MAAEI,OAAO;MAAEI,eAAe;MAAEF;IAAM,CAAE;IAAAR,QAAA,EAC7EA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACpB,EAAA,CAnCWF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAsCzB,OAAO,MAAMwB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM7B,UAAU,CAACG,WAAW,CAAC;AAAA;AAAC0B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}